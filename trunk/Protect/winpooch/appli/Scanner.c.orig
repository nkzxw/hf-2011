/******************************************************************/
/*                                                                */
/*  Winpooch : Windows Watchdog                                   */
/*  Copyright (C) 2004-2006  Benoit Blanchon                      */
/*                                                                */
/*  This program is free software; you can redistribute it        */
/*  and/or modify it under the terms of the GNU General Public    */
/*  License as published by the Free Software Foundation; either  */
/*  version 2 of the License, or (at your option) any later       */
/*  version.                                                      */
/*                                                                */
/*  This program is distributed in the hope that it will be       */
/*  useful, but WITHOUT ANY WARRANTY; without even the implied    */
/*  warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR       */
/*  PURPOSE.  See the GNU General Public License for more         */
/*  details.                                                      */
/*                                                                */
/*  You should have received a copy of the GNU General Public     */
/*  License along with this program; if not, write to the Free    */
/*  Software Foundation, Inc.,                                    */
/*  675 Mass Ave, Cambridge, MA 02139, USA.                       */
/*                                                                */
/******************************************************************/


/******************************************************************/
/* Build configuration                                            */
/******************************************************************/

#define TRACE_LEVEL	2	// warning level

#define AUTO_DETECT_SCANNER	0


/******************************************************************/
/* Includes                                                       */
/******************************************************************/

// module's interface
#include "Scanner.h"

// standard headers
#include <shlwapi.h>
#include <ctype.h>
#include <stdio.h>
#include <tchar.h>

// project's headers
#include "Config.h"
#include "strlcpy.h"
#include "SpyServer.h"
#include "Trace.h"


/******************************************************************/
/* Internal constants                                             */
/******************************************************************/

// antivirus names (used for configuration) 
static LPCTSTR szNoneName	= TEXT("None") ;
static LPCTSTR szClamWinName	= TEXT("ClamWin") ;
static LPCTSTR szKavWsName	= TEXT("KavWs") ;
static LPCTSTR szBitDefName	= TEXT("BitDefender") ;

// constants for ClamWin
static LPCTSTR szClamWinKey	= TEXT("Software\\ClamWin") ;
static LPCTSTR szClamWinPathValue = TEXT("Path") ;
static LPCTSTR szClamWinConf	= TEXT("ClamWin.conf") ;

// constants for Kav Ws
static LPCTSTR szKavWsKey	= TEXT("Software\\KasperskyLab\\InstalledProducts\\Kaspersky Anti-Virus for Workstation") ;
static LPCTSTR szKavWsFolderValue = TEXT("Folder") ;
static LPCTSTR szKavWsExe	= TEXT("KAVShell.exe") ;

// constants for BitDefender
static LPCTSTR szBitDefKey	= TEXT("SOFTWARE\\Softwin") ;
static LPCTSTR szBitDefFolderValue = TEXT("BitDefender Scan Server") ;
static LPCTSTR szBitDefExe	= TEXT("bdc.exe") ;


/******************************************************************/
/* Internal data types                                            */
/******************************************************************/

typedef struct {
  TCHAR		szScanner[MAX_PATH] ;
  TCHAR		szDatabase[MAX_PATH] ;
} CLAMWINCONF ;

typedef struct {
  TCHAR		szScanner[MAX_PATH] ;
} KAVWSCONF ;

typedef struct {
  TCHAR		szScanner[MAX_PATH] ;
  TCHAR		szFolder[MAX_PATH] ;
} BITDEFCONF ;

typedef struct {
  UINT		nScanner ;
  union {
    CLAMWINCONF	clamwinconf ;
    KAVWSCONF	kavwsconf ;
    BITDEFCONF  bitdefconf ;
  } ;
} INTERNALDATA ;


/******************************************************************/
/* Internal data                                                  */
/******************************************************************/

static INTERNALDATA	g_data ;


/******************************************************************/
/* Internal functions                                             */
/******************************************************************/

BOOL _Scanner_ClamWin_Configure (CLAMWINCONF*) ;

UINT _Scanner_ClamWin_ScanFile (CLAMWINCONF*, LPCTSTR, LPTSTR szOutput, UINT nOutputMax, DWORD nPriorityClass) ;

BOOL _Scanner_ClamWin_FindConfFilePath (LPTSTR) ;

BOOL _Scanner_KavWs_Configure (KAVWSCONF*) ;

UINT _Scanner_KavWs_ScanFile (KAVWSCONF*, LPCTSTR, LPTSTR szOutput, UINT nOutputMax, DWORD nPriorityClass) ;

BOOL _Scanner_BitDef_Configure (BITDEFCONF*) ;

UINT _Scanner_BitDef_ScanFile (BITDEFCONF*, LPCTSTR, LPTSTR szOutput, UINT nOutputMax, DWORD nPriorityClass) ;


/******************************************************************/
/* Exported function : Init                                       */
/******************************************************************/

BOOL Scanner_Init () 
{
  LPCTSTR	szConfigScanner ;
  BOOL		bResult ;

  TRACE ;
  
  //
  // Which antivirus ?
  //

  // read configuration
  szConfigScanner = Config_GetString(CFGSTR_ANTIVIRUS) ;

  // -> NULL, autodetect
  if( ! szConfigScanner )
    {
#if AUTO_DETECT_SCANNER
      if( _Scanner_KavWs_Configure (&g_data.kavwsconf) )
	g_data.nScanner = SCANNER_BITDEFENDER ;
      else if( _Scanner_ClamWin_Configure (&g_data.clamwinconf) )
	g_data.nScanner = SCANNER_CLAMWIN ;
      else if( _Scanner_KavWs_Configure (&g_data.kavwsconf) )
	g_data.nScanner = SCANNER_KASPERSKY_WS ;
      else 
	g_data.nScanner = SCANNER_NONE ;
      bResult = TRUE ;
#else
      bResult = FALSE ;
#endif
    } 
  // -> ClamWin
  else if( !_tcsicmp(szClamWinName,szConfigScanner) ) 
    {
      bResult = _Scanner_ClamWin_Configure (&g_data.clamwinconf) ;  
      g_data.nScanner = SCANNER_CLAMWIN ;
    }
  // -> Kaspersky WS ?
  else if( !_tcsicmp(szKavWsName,szConfigScanner) ) 
    {
      bResult = _Scanner_KavWs_Configure (&g_data.kavwsconf) ;  
      g_data.nScanner = SCANNER_KASPERSKY_WS ;
    }
  // -> BitDefender ?
  else if( !_tcsicmp(szBitDefName,szConfigScanner) ) 
    {
      bResult = _Scanner_BitDef_Configure (&g_data.bitdefconf) ;  
      g_data.nScanner = SCANNER_BITDEFENDER ;
    }
  // -> None
  else if( !_tcsicmp(szNoneName,szConfigScanner) ) 
    {
      g_data.nScanner = SCANNER_NONE ;
      bResult = TRUE ;
    }
  // -> Other
  else bResult = FALSE ;
  
  // if failed, then set to "none"
  if( ! bResult ) g_data.nScanner = SCANNER_NONE ;

  return bResult ;
}


/******************************************************************/
/* Exported function : Uninit                                     */
/******************************************************************/

VOID Scanner_Uninit () 
{
  TRACE ;

  // update config
  switch( g_data.nScanner )
    {
    case SCANNER_CLAMWIN:
      Config_SetString (CFGSTR_ANTIVIRUS, szClamWinName) ;
      break ;
    case SCANNER_KASPERSKY_WS:
      Config_SetString (CFGSTR_ANTIVIRUS, szKavWsName) ;
      break ;
    case SCANNER_BITDEFENDER:
      Config_SetString (CFGSTR_ANTIVIRUS, szBitDefName) ;
      break ;
    default:
      Config_SetString (CFGSTR_ANTIVIRUS, szNoneName) ;
    }    
}


/******************************************************************/
/* Exported function                                              */
/******************************************************************/

BOOL Scanner_SetScanner (UINT nScanner) 
{
  BOOL bResult = FALSE ;
  
  TRACE ;

  switch( nScanner )
    {
    case SCANNER_CLAMWIN:
      bResult = _Scanner_ClamWin_Configure (&g_data.clamwinconf)  ;
      break ;
    case SCANNER_KASPERSKY_WS:
      bResult = _Scanner_KavWs_Configure (&g_data.kavwsconf)  ;
      break ;
    case SCANNER_BITDEFENDER:
      bResult = _Scanner_BitDef_Configure (&g_data.bitdefconf)  ;
      break ;
    case SCANNER_NONE:
      bResult = TRUE ;
      break ;
    }

  g_data.nScanner = bResult ? nScanner :  SCANNER_NONE ; 

  // tell the spy server that he should not scan this file
  SpySrv_SetScannerExePath (Scanner_GetScannerExe()) ;

  return bResult ;
}

/******************************************************************/
/* Exported function : IsConfigured                               */
/******************************************************************/

BOOL Scanner_IsConfigured ()
{
  TRACE ;
  
  return g_data.nScanner!=SCANNER_NONE ;
}


/******************************************************************/
/* Exported function                                              */
/******************************************************************/

UINT Scanner_GetScanner  () 
{
  TRACE ;
  
  return g_data.nScanner ;
}


/******************************************************************/
/* Exported function : IsScanner                                  */
/******************************************************************/

BOOL Scanner_IsScanner (LPCTSTR szPath) 
{
  LPCTSTR szScanner = Scanner_GetScannerExe () ;
  
  return 0==_tcsicmp(szScanner,szPath) ;
}


/******************************************************************/
/* Exported function                                              */
/******************************************************************/

LPCTSTR Scanner_GetScannerExe ()
{
  LPCTSTR szScanner ;

  switch( g_data.nScanner )
    {
    case SCANNER_CLAMWIN:
      szScanner = g_data.clamwinconf.szScanner ;
      
    case SCANNER_KASPERSKY_WS:
      szScanner = g_data.kavwsconf.szScanner ;
      break ;

    case SCANNER_BITDEFENDER:
      szScanner = g_data.bitdefconf.szScanner ;
      break ;

    default:
      return NULL  ;
    }
  
  return szScanner ;
}


/******************************************************************/
/* Exported function : ScanFile                                   */
/******************************************************************/

UINT Scanner_ScanFile (LPCTSTR szPath, LPTSTR szOutput, UINT nOutputMax) 
{
  TRACE_INFO ("Path = %s\n", szPath) ;

  // avoid scanning the scanner
  if( Scanner_IsScanner(szPath) )
    return FALSE ;

  switch( g_data.nScanner )
    {
    case SCANNER_CLAMWIN:
      return _Scanner_ClamWin_ScanFile (&g_data.clamwinconf, szPath, szOutput, nOutputMax, HIGH_PRIORITY_CLASS) ;
      
    case SCANNER_KASPERSKY_WS:
      return _Scanner_KavWs_ScanFile (&g_data.kavwsconf, szPath, szOutput, nOutputMax, HIGH_PRIORITY_CLASS) ;

    case SCANNER_BITDEFENDER:
      return _Scanner_BitDef_ScanFile (&g_data.bitdefconf, szPath, szOutput, nOutputMax, HIGH_PRIORITY_CLASS) ;
    }

  return SCANNER_NONE ;
}


/******************************************************************/
/* Exported function                                              */
/******************************************************************/

UINT Scanner_ScanFileBg (LPCTSTR szPath) 
{
  TRACE_INFO (TEXT("Path = %s\n"), szPath) ;

  // avoid scanning the scanner
  if( Scanner_IsScanner(szPath) )
    return SCAN_NO_VIRUS ;

  switch( g_data.nScanner )
    {
    case SCANNER_CLAMWIN:
      return _Scanner_ClamWin_ScanFile (&g_data.clamwinconf, szPath, NULL, 0, IDLE_PRIORITY_CLASS) ;
      
    case SCANNER_KASPERSKY_WS:
      return _Scanner_KavWs_ScanFile (&g_data.kavwsconf, szPath, NULL, 0, IDLE_PRIORITY_CLASS) ;

    case SCANNER_BITDEFENDER:
      return _Scanner_BitDef_ScanFile (&g_data.bitdefconf, szPath, NULL, 0, IDLE_PRIORITY_CLASS) ;
    }

  return SCAN_FAILED ;
}



/******************************************************************/
/* Internal function                                              */
/******************************************************************/

BOOL _Scanner_ClamWin_FindConfFilePath (LPTSTR szPath) 
{
  HKEY	hkey ;
  LONG	nResult ;
  DWORD dwType, dwSize ;
  UINT	nLen ;
  TCHAR szValue[MAX_PATH] ;

  // open key on HKCU
  nResult = RegOpenKeyEx (HKEY_CURRENT_USER, szClamWinKey, 0, KEY_READ, &hkey) ;
  if( ERROR_SUCCESS!=nResult )
    {
      TRACE_INFO (TEXT("Failed to open key HKCU\\%s (error=%d)\n"),
		  szClamWinKey, nResult) ;
      
      // else try on HKLM
      nResult = RegOpenKeyEx (HKEY_LOCAL_MACHINE, szClamWinKey, 0, KEY_READ, &hkey) ;      
      if( ERROR_SUCCESS!=nResult )
	{
	  TRACE_INFO (TEXT("Failed to open key HKLM\\%s (error=%d)\n"),
		      szClamWinKey, nResult) ;
	  return FALSE ;
	}
    }

  // read install path
  dwSize = sizeof(szValue) ;
  nResult = RegQueryValueEx (hkey, szClamWinPathValue, NULL, 
			     &dwType, (BYTE*)szValue, &dwSize);
  
  // ok ?
  if( ERROR_SUCCESS!=nResult || dwSize==0 ) {
      TRACE_ERROR (TEXT("Failed to read ClamWin path (error=%d)\n"),nResult) ;
      CloseHandle(hkey) ;
      return FALSE ;
    }

  // expand env strings
  nLen = ExpandEnvironmentStrings (szValue, szPath, MAX_PATH) ;
  if( ! nLen ) { 
    TRACE_ERROR (TEXT("ExpandEnvironmentStrings failed (error=%d)\n"), GetLastError()) ;
    CloseHandle(hkey) ;
    return FALSE ;    
  }

  // get conf file path 
  _tcscat (szPath, TEXT("\\")) ;
  _tcscat (szPath, szClamWinConf) ;
  
  CloseHandle(hkey) ;

  return TRUE ;
}


/******************************************************************/
/* Internal function                                              */
/******************************************************************/

BOOL _Scanner_ClamWin_Configure (CLAMWINCONF * pConf) 
{
  TCHAR	szConfFile[MAX_PATH] ;
  TCHAR szLine[1024] ;
  FILE * fp ;
  
  if( ! _Scanner_ClamWin_FindConfFilePath(szConfFile) ) {
    TRACE_ERROR (TEXT("Failed to find ClamWin configuration file\n")) ;
    return FALSE ;
  }

  TRACE_INFO (TEXT("ClamWin configuration file : %s\n"), szConfFile) ;

  fp = _tfopen (szConfFile, TEXT("rt")) ;

  if( ! fp ) {
    TRACE_ERROR (TEXT("Failed to open ClamWin configuration file.\n")) ;
    return FALSE ;
  }

  while( _fgetts(szLine,1024,fp) )
    {
      int i ;
      int iNameFirst, iNameLast ;
      int iValueFirst, iValueLast ;
      LPCTSTR szName, szValue ;

      //TRACE_INFO (TEXT("%s"), szLine) ;

      i = 0 ;

      // skip spaces
      while( _istspace(szLine[i]) ) i++ ;

      // is the line empty ?
      if( ! szLine[i] ) continue ;
      
      // is it a comment ?
      if( szLine[i]==TEXT('#') ) continue ;

      // is it a section ?
      if( szLine[i]==TEXT('[') ) continue ;

      iNameFirst = i ;
      
      // look for '='
      while( szLine[i] && szLine[i]!=TEXT('=') ) i++ ;

      // end of line ?
      if( ! szLine[i] ) continue ;

      iNameLast = i-1 ;

      // remove ending spaces
      while( _istspace(szLine[iNameLast]) ) iNameLast-- ;
      
      // skip spaces
      i++ ;
      while( _istspace(szLine[i]) ) i++ ;
      
      iValueFirst = i ;

      while( szLine[i] && szLine[i]!=TEXT('\n') && szLine[i]!=TEXT('\r') ) i++ ;
      
      iValueLast = i-1 ;

      // remove ending spaces
      while( _istspace(szLine[iValueLast]) ) iValueLast-- ;  

      szName = szLine + iNameFirst ;
      szLine[iNameLast+1] = 0 ;

      szValue = szLine + iValueFirst ;
      szLine[iValueLast+1] = 0 ;

      //TRACE_INFO (TEXT("(%s) = (%s)\n"), szName, szValue) ;

      if( ! _tcscmp(TEXT("clamscan"),szName) )
	{
	  _tcslcpy (pConf->szScanner, szValue, MAX_PATH) ;
	  TRACE_INFO ("Scanner = %s\n", pConf->szScanner) ;
	}
      
      if( ! _tcscmp(TEXT("database"),szName) )
	{
	  _tcslcpy (pConf->szDatabase, szValue, MAX_PATH) ;
	  TRACE_INFO ("Database = %s\n", pConf->szDatabase) ;
	}
    }

  fclose (fp) ;

  // if path is relative, make it absolute
  if( PathIsRelative(pConf->szScanner) )
    {
      TCHAR szTemp[MAX_PATH] ;     

      _tcscpy (szTemp, pConf->szScanner) ;
      _tcscpy (pConf->szScanner, szConfFile) ;
      PathRemoveFileSpec (pConf->szScanner) ;
      PathAppend (pConf->szScanner, szTemp) ;

      TRACE_WARNING (TEXT("Scanner path was relative, this is absolute path : %s\n"),
		     pConf->szScanner) ;
    }

  // if path is relative, make it absolute
  if( PathIsRelative(pConf->szDatabase) )
    {
      TCHAR szTemp[MAX_PATH] ;     

      _tcscpy (szTemp, pConf->szDatabase) ;
      _tcscpy (pConf->szDatabase, szConfFile) ;
      PathRemoveFileSpec (pConf->szDatabase) ;
      PathAppend (pConf->szDatabase, szTemp) ;

      TRACE_WARNING (TEXT("Database path was relative, this is absolute path : %s\n"),
		     pConf->szDatabase) ;
    }


  return TRUE ;
}


BOOL _Scanner_Run (LPTSTR szCmdLine, LPTSTR szDirectory,
		   DWORD*pdwExitCode,
		   LPTSTR szOutput, UINT nOutputMax,
		   DWORD nPriorityClass) 
{
  SECURITY_ATTRIBUTES sa = {0};
  STARTUPINFO         si = {0};
  PROCESS_INFORMATION pi = {0};
  HANDLE              hPipeOutputRead  = NULL;
  HANDLE              hPipeOutputWrite = NULL;

  DWORD		dwBytesRead ;
  BOOL		bSuccess ;
  UINT		nOutputPos = 0 ;

  TRACE_INFO (TEXT("CmdLine = %s\n"), szCmdLine) ;

  sa.nLength		= sizeof(sa) ;
  sa.bInheritHandle	= TRUE ; 
  sa.lpSecurityDescriptor = NULL ;
  
  if( szOutput!=NULL )
    {
      if( ! CreatePipe (&hPipeOutputRead, &hPipeOutputWrite, &sa, 0) )
	TRACE_WARNING (TEXT("CreatePipe failed (error=%d)\n"), GetLastError()) ;
 
      si.cb		= sizeof(si);
      si.dwFlags	= STARTF_USESHOWWINDOW | STARTF_USESTDHANDLES;
      si.wShowWindow	= SW_HIDE;
      si.hStdInput	= GetStdHandle (STD_INPUT_HANDLE) ;
      si.hStdOutput	= hPipeOutputWrite ;
      si.hStdError	= hPipeOutputWrite ;//GetStdHandle (STD_ERROR_HANDLE) ;
    }
  else
    {
      si.cb		= sizeof(si);
      si.dwFlags	= STARTF_USESHOWWINDOW ;
      si.wShowWindow	= SW_HIDE;
    }
  
  if( ! CreateProcess (NULL, szCmdLine, NULL, NULL, TRUE, nPriorityClass, 
		       NULL, szDirectory, &si, &pi) ) {
    TRACE_ERROR (TEXT("Failed to run scanner\n")) ;
    CloseHandle (hPipeOutputWrite);
    CloseHandle (hPipeOutputRead);
    return FALSE ;
  }
  
  CloseHandle (hPipeOutputWrite);
 
  // wait for process end
  WaitForSingleObject (pi.hProcess, 30000) ;

  GetExitCodeProcess (pi.hProcess, pdwExitCode) ;

  if( szOutput!=NULL )
    {
      while( nOutputPos<nOutputMax-1 )
	{
	  UINT i ;
	  char szBuffer[64] ;
	  
	  // try to read pipe
	  bSuccess = ReadFile (hPipeOutputRead, 
			       szBuffer, 
			       64,
			       &dwBytesRead, NULL) ;  
	  
	  // failed to read ?
	  if( !bSuccess || !dwBytesRead ) break ;
	  
	  for( i=0 ; i<dwBytesRead ; i++ )
	    {
	      switch( szBuffer[i] )
		{
		case '\r':
		  break ;
		case '\n':
		  szOutput[nOutputPos++] = TEXT('\r') ;
		  szOutput[nOutputPos++] = TEXT('\n') ;
		  break ;
		default:
		  szOutput[nOutputPos++] = szBuffer[i] ;
		}
	      
	      if( nOutputPos>=nOutputMax-1 ) break ;
	    }
	}
      
      szOutput[nOutputPos] = 0 ;
    }      
  
  TRACE_INFO (TEXT("Scan result = %u\n"), *pdwExitCode) ;
  
  CloseHandle (hPipeOutputRead);
  CloseHandle (pi.hThread) ;
  CloseHandle (pi.hProcess) ;

  return TRUE ;
}


/******************************************************************/
/* Internal function                                              */
/******************************************************************/

UINT _Scanner_ClamWin_ScanFile (CLAMWINCONF * pConf, LPCTSTR szFile,
				LPTSTR szOutput, UINT nOutputMax,
				DWORD nPriorityClass) 
{
  TCHAR		szCmdLine[1024] ;
  DWORD		dwExitCode ;
  BOOL		bSuccess ;
  
  wsprintf (szCmdLine, TEXT("\"%s\" -d \"%s\" \"%s\""), 
	    pConf->szScanner, pConf->szDatabase, szFile) ;
  
  bSuccess = _Scanner_Run (szCmdLine, NULL,
			   &dwExitCode,
			   szOutput, nOutputMax,
			   nPriorityClass) ;

  if( ! bSuccess ) return SCAN_FAILED ;

  return
    dwExitCode==0 ? SCAN_NO_VIRUS :
    dwExitCode==1 ? SCAN_VIRUS_FOUND :
    SCAN_FAILED ;
}



/******************************************************************/
/* Internal function                                              */
/******************************************************************/

BOOL _Scanner_KavWs_Configure (KAVWSCONF * pConf) 
{
  HKEY	hkey ;
  LONG	nResult ;
  DWORD	dwSize ;
  DWORD	dwType ;
  TCHAR	szBuffer[MAX_PATH] ;
  BOOL	bFound ;

  nResult = RegOpenKeyEx (HKEY_LOCAL_MACHINE,
			  szKavWsKey, 0, 
			  KEY_QUERY_VALUE,
			  &hkey) ;
  if( nResult!=ERROR_SUCCESS ) {
    TRACE_INFO (TEXT("Registry key for KavWs not found\n")) ;
    return FALSE ;
  }

  dwSize = sizeof(szBuffer) ;

  nResult = RegQueryValueEx (hkey,
			     szKavWsFolderValue,
			     NULL,
			     &dwType,
			     (BYTE*)szBuffer,
			     &dwSize) ;
  RegCloseKey (hkey) ;

  if( nResult!=ERROR_SUCCESS ) {
    TRACE_INFO (TEXT("Failed to read folder value for KavWs\n")) ;
    return FALSE ;
  }

  PathCombine (pConf->szScanner, szBuffer, szKavWsExe) ;

  bFound = GetFileAttributes (pConf->szScanner) != 0xFFFFFFFF ;

  if( ! bFound )
    TRACE_WARNING (TEXT("KavWs scanner not found (path=%s)\n"), pConf->szScanner) ;

  return bFound ;
}


/******************************************************************/
/* Internal function                                              */
/******************************************************************/

UINT _Scanner_KavWs_ScanFile (KAVWSCONF * pConf, LPCTSTR szFile,
			      LPTSTR szOutput, UINT nOutputMax,
			      DWORD nPriorityClass) 
{
  TCHAR		szCmdLine[1024] ;
  TCHAR		szTmpFile[MAX_PATH] ;
  TCHAR		szTmpDir[MAX_PATH] ;
  DWORD		dwExitCode ;
  BOOL		bSuccess ;
  FILE		*fp ;

  GetTempPath (MAX_PATH, szTmpDir) ;
  GetTempFileName (szTmpDir, PathFindFileName(szFile), 0, szTmpFile) ;
  
  wsprintf (szCmdLine, TEXT("\"%s\" scan \"%s\" /w:\"%s\""), 
	    pConf->szScanner, szFile, szTmpFile) ;
  
  bSuccess = _Scanner_Run (szCmdLine, NULL,
			   &dwExitCode,
			   szOutput, nOutputMax, 
			   nPriorityClass) ;

  if( ! bSuccess ) return SCAN_FAILED ;
  
  fp = _tfopen(szTmpFile, TEXT("rt")) ;
  
  if( fp!=NULL )
    {
      TCHAR szLine[128] ;
      szOutput[0] = 0 ;

      while( _fgetts(szLine,128,fp) )
	_tcscat (szOutput, szLine) ;
      
      fclose (fp) ;
    }
  
  return
    dwExitCode==0 ? SCAN_NO_VIRUS :
    dwExitCode==1 ? SCAN_VIRUS_FOUND :
    SCAN_FAILED ;
}


/******************************************************************/
/* Internal function                                              */
/******************************************************************/

BOOL _Scanner_BitDef_Configure (BITDEFCONF * pConf) 
{
  HKEY	hkey ;
  LONG	nResult ;
  DWORD	dwSize ;
  DWORD	dwType ;
  BOOL	bFound ;

  nResult = RegOpenKeyEx (HKEY_LOCAL_MACHINE, szBitDefKey, 0, 
			  KEY_QUERY_VALUE, &hkey) ;
  if( nResult!=ERROR_SUCCESS ) {
    TRACE_INFO (TEXT("Registry key for BitDefender not found\n")) ;
    return FALSE ;
  }

  dwSize = sizeof(TCHAR)*MAX_PATH ;

  nResult = RegQueryValueEx (hkey,
			     szBitDefFolderValue,
			     NULL,
			     &dwType,
			     (BYTE*)pConf->szFolder,
			     &dwSize) ;
  RegCloseKey (hkey) ;

  if( nResult!=ERROR_SUCCESS ) {
    TRACE_INFO (TEXT("Failed to read folder value for BitDefender\n")) ;
    return FALSE ;
  }

  PathCombine (pConf->szScanner, pConf->szFolder, szBitDefExe) ;

  bFound = GetFileAttributes (pConf->szScanner) != 0xFFFFFFFF ;

  if( ! bFound )
    TRACE_WARNING (TEXT("BitDefender scanner not found (path=%s)\n"), pConf->szScanner) ;

  return bFound ;
}


/******************************************************************/
/* Internal function                                              */
/******************************************************************/

UINT _Scanner_BitDef_ScanFile (BITDEFCONF * pConf, LPCTSTR szFile,
			       LPTSTR szOutput, UINT nOutputMax,
			       DWORD nPriorityClass) 
{
  TCHAR		szCmdLine[1024] ;
  DWORD		dwExitCode ;
  BOOL		bSuccess ;
  
  wsprintf (szCmdLine, TEXT("\"%s\" \"%s\" /files"), 
	    pConf->szScanner, szFile) ;
  
  bSuccess = _Scanner_Run (szCmdLine, pConf->szFolder,
			   &dwExitCode,
			   szOutput, nOutputMax,
			   nPriorityClass) ;

  if( ! bSuccess ) return SCAN_FAILED ;

  return
    dwExitCode==0 ? SCAN_NO_VIRUS :
    dwExitCode==1 ? SCAN_VIRUS_FOUND :
    SCAN_FAILED ;
}
